Урок 4. Структура фреймворка

    app - основна логіка додатку, саме моделі, контролери, посередники і проміжні фільтри, роутери і т.д.
        всі класи описані в просторі імен app
        \<NamespaceName>\<SubNamespaceName>\<ClassName>.php
        User.php - файл моделі по роботі з користувачем
        в корні папки app розташовуються файли моделей
        в інших папках розташовуються контролери

        Console - надає доступ до АРІ фреймворку по протоколу CLI
            можна отримувати доступ до фреймворка, використвуючи командний рядок

        Http - містяться контролери, посередники, класи запитів (класи валідації користувацького введення)
            Kernel.php - це http-ядро, ядро обробки запитів, які передаються по протоколу http до фреймворку
            Routes.php - в цьому файлі будуть описані маршрути, які будуть формувати функціонал програми

        Events - зберігаються класи подій

        Exceptions - містить обробники виключень, можна розміщувати класи виключень

        Jobs - містятька класи черг, тобто можна визначити задачі, які будуть поставлені в чергу, або ж працювати синхронно в межах одного запиту

        Listeners - містить обробники подій, які відбуваються при спрацьовуванні тієї чи іншої події

        Policies - містить класи політики безпеки додатку. Політика безпеки застосовуються для визначення прав користувача для виконання певної дії

        Providers - містить сервіс-провайдери додатку

    bootstrap - файли, які виконують першочергове завантаження фреймворку і налаштовують автозавантаження класів
        містить ті файли, які повинні відпрацювати в першочерговий момент роботи додатку в цілому

    config - конфігураційні файли додатку

    database - містить файли міграції баз даних і посіву даних (це додавання даних в певні таблиці)

    public - збергіається глобальна точка входу у Laravel. Треба зберігати всі ті дані, до яких можна надати публічний доступ
        треба зберігати сюди зображення, стилі, скрипти і т.д.

    resources - містить шаблони, вигляди, файли локалізації і робочі файли LESS, SASS і JS додатку

    storage - містить скомпільовані blade-шаблони, файли сесій, файли кешу і інші системні тимчасові файли

    tests - зберігаються unit-тести

    vendor - зберігаються всі скачані бібліотеки і класи
        сирцевий код фреймворка, всі сторонні бібліотеки, від яких залежить його робота

    .env - файл, в якому описані змінні оточення, налаштування

    .env.example - приклад оформлення файлу, в якому містяться змінні оточення

    .gitattributes - необхідний для роботи системи контроля версій Git

    .gitignore - необхідний для роботи системи контроля версій Git

    artisan - надає доступ до консолі фреймворка

    composer.json - файл, який згенерований Composer і містить всі залежності, від яких залежить функціонал фреймворку

    composer.lock - містить статус установки бібліотек, від яких залежить функціонал фреймворку

    gulpfile.js - файл, які потрібні для роботи спеціального інструменту Laravel Elixir

    package.json - файл, які потрібні для роботи спеціального інструменту Laravel Elixir

    phpunit.xml - містить налаштування системи тестування php unit

    server.php - файл, який емулює роботу модуля перенаправлень сервера Apache

Урок 5. Налаштування конфігурації фреймворка

    Змінні оточення - це ті налаштування, які змінюються під час розробки додатку

    Вміст файлу .env:

        APP_ENV - назва середовища розробки, тобто всі наступні параметри відносяться до певного середовища розробки

        APP_DEBUG - увімкнення режиму відлагодження. Якщо true, то фреймворк буде відображати детальні дані про помилки

        APP_KEY - 32-символьний рядок, який використовується для шифрування даних у фреймворку

        DB_HOST - путь до сервера, його ір

        DB_DATABASE - назва бази даних

        DB_USERNAME - ім'я користувача

        DB_PASSWORD - пароль користувача

        CACHE_DRIVER - налаштування системи кешування

        SESSION_DRIVER - налаштування по роботі з сесіями

        QUEUE_DRIVER - налаштування по роботі

        REDIS_... - налаштування підключення до Redis

        MAIL_... - налаштування відправлення електронних листів

    Папка config

        app.php - глобальні налаштування роботи всього фреймворка в цілому

        database.php - налаштування бази даних

        mail.php - налаштування пошти

        view.php - налаштування видів

    Консоль

        artisan - доступо до консолі

        php artisan - доступ до команд консолі

        php artisan app:name Test - змінити назву кореневого простору імен

    APP_KEY - ключ, який використовується для шифрування даних
        можна згенерувати, використовуючи консоль

        php artisan key:generate - згенерувати новий ключ додатку

Урок 6. Принцип роботи по MVC шаблону

    Принцип роботи:
        Запит сторінки > точка входу > маршрутизатор > контролер > модель > БД > контролер > вид > відображення даних

    routes.php - маршрутизатор фреймворка
        Знаходиться в папці routes/web.php (з версії 5.3)

    Щоб створити новий маршрут, треба в роутері прописати шлях до маршрута і у виді додати сторінку виду name.blade.php

Урок 7. Типи запитів для передачі даних в маршрутизації (GET | POST)

    Маршрутизація - процес отримання частини запиту користувача, тобто тієї частини запиту, яка знаходиться після базового URL і її розкладення на параметри для визначення того, який контролер і яка дія даного контролера повинні виконати поставлений запит
        Також це передача керування певному контролеру.
        Це процес розбору частини URI і пошук співпадання з описаним раніше маршрутом або роутером і наступним викликом обробника маршрута

    Маршрут - це метод, в якому визначений шаблон частини URI і функція обробник, яка буде виконана при співпаданні поточного запиту

    Uniform Resource Identifier (єдинообразний ідентифікатор ресурса)
        URI = http://domen.ua/articles/internet/article.html

    Uniform Resource Locator (єдинообразний вказівник ресурса)
        URL = http://domen.ua

    Uniform Resource Name (єдинообразний вказівник імені)
        URN = /articles/internet/article.html

    Запит складається з: статрового рядка, заголовки, тіло запиту

    Для розмежування дій з ресурсами на рівні HTTP були придумані наступні варіанти:
        GET - отримання ресурса
        POST - створення ресурса
        PUT - оновлення ресурса
        DELETE - видалення ресурса

    При отриманні запиту DELETE сервер не повинен обов'язково видалити ресурс. Це вирішує уже розробник

    REST

    Фасад - спеціальний клас, який надає доступ до деякого елементу фреймворка Laravel
        Клас, який надає спрощений доступ до іншого класу

Урок 8. Параметри маршрутів

    При формуванні запитів для того, щоб вказати параметри, їх треба вказувати в {id} і вказати ім'я параметра
        // Route::get('/page/{id}', function () {

    Параметри у функцію-обробник потрапляють по порядку, а не по іменам

    Якщо параметр не обов'язковий, то після нього потрібно поставити ?
        Наприклад {id?}

    Глобальні параметри умови для роутерів можна визначити у RouteServiceProvider.php (app/Providers)

    Групування маршрутів (наприклад всі маршрути в папці admin матимуть це слово на початку)
        // Route::group(['prefix' => 'admin'], function (){

Урок 9. Контролери

    Контролери дозволяють винести код обробника роутера в окремий файл

    php artisan make:controller Core - команда для artisan щоб створити контролер

    Створюючи маршрути в якості обробника можна використовувати як різні контролери, так і один єдиний контролер, але з різними методами

    Маршрути потрібно іменувати

    Контролери типу ресурс створюються для створення RESTful систем

    Управління інформацією створюваного сервіса повністю залежить від протоколу передачі даних

Урок 10. Middleware. Класи-посередники

    Класи посередники - це фільтри обробки HTTP-запитів

    Наприклад, є посередники, які потрібні для перевірки авторизації користувача, перевірка на права користувача для перегляду тієї чи іншої сторінки

    Дозволяють виконати певну дію, до обробки запиту і формуванняя відповіді.

    За допомогою ::class можна отримати повну назву класа

    Якщо визначити посередник глобально, то доступ до поточного маршрута отримати не можна

Урок 11. Шаблони представлення. Види.

    Вид - це шаблон, який повинен відобразити дані проекта на екран користувача

    В шаблонх не потрібно зберігати ніяку логіку, яка стосується обробки чи зміни даних

    view() - це функція хелпер

Урок 12. Шаблонізатор Blade

    Шаблонізатор - це спеціальний механізм, який використовується для підстановки даних в визначені місця шаблона і формування вигляду проекту

    Шаблон - це документ в форматі .php, який містить в собі HTML-теги а також спеціальні мітки, замість яких потім вставляютсья дані з логічної частини

    Якщо використовується шаблонізатор, то не повинно бути жодного рядка коду на мові PHP

    @section('navbar') - оголошення початку секції

    @endsection - оголошення кінця секції

    @yield('navbar') - відображення секції

    @show - закрити тег section і відразу ж відобразити вміст секції

    @extends('default.layouts.layout') - даний шаблон наслідує функціонал батьківського макету

    В дочірніх макетх можна перевизначати секції

    @parent - повертає вміст батьківської секції

    @include - підключення коду з іншої секції

Урок 13. Умовні і циклічні директиви шаблонізатора Blad

    Виведення даних можна здійснювати за допомогою {{ }}

    {!! !!} - виведення тексту з відключенням функції htmlentities (для виведення скриптів наприклад)

    @{{ var }} - не буде враховуватися шаблонізатором

    {{ isset($bvar) ? $bvar : $title}} - простий тернарний оператор

    {{ $bvar or $title}} - тернарний оператор шаблонізатора

    Умовний оператор if
        @if(count($data) < 3)
            В масиві менше 3 елементів
        @elseif (count($data) > 10)
            В масиві більше 10 елементів
        @else
            В масиві багато елементів
        @endif

    Цикл for
        @for($i = 0; $i < count($dataI); $i++)
            <li>{{ $dataI[$i]}}</li>
        @endfor

    Цикл foreach
        @foreach($data as $k => $value)
            <li>{{ $k.' => '.$value }}</li>
        @endforeach

    Цикл forelse (вбудована перевірка на пустоту)
        @forelse($data as $k => $value)
            <li>{{ $k.' => '.$value }}</li>
            @empty
                <p>No items</p>
        @endforelse

    Цикл while
        @while (FALSE)
            <p>I'm looping forever</p>
        @endwhile

    each - обходить за допомогою масива вміст масива і на кожній ітерації циклу вміст комірок масиву потрапляє в змінну value
        вміст змінної на кожній ітерації циклу передається у певний вид, який вказаний в параметрах
        @each('default.list', $dataI, 'value')

Урок 14. Клас Request

    Клас Request - абстракція відправлюваного запиту користувача

    Отримуємо метод ядра обробника запитів
        $kernel = $app->make(Illuminate\Contracts\Http\Kernel::class);

    Обробник запиту користувача handle()
        $response = $kernel->handle(
            $request = Illuminate\Http\Request::capture()
        );

    Request - абстракція запиту

    За допомогою метода input можна отримати доступ до однієї змінної в запиті

    Метод has() - повертає true, якщо комірка, ім'я якої передають присутня у масиві даних запиту і не пусте

    Метод all() - передає всі параметри, які передаються у вигляді масиву
        all() - для всіх
        only() - для деяких
        except() - виключаючи; ті комірки, які нас не цікавлять

    Методи для роботи з адресним рядком
        path() - повертає частину URI, сам запит, все, крім домену сайта
        is() - перевіряє, чи path співпадає з деяким шаблоном
        url() - повертає шлях із адресного рядка, але без GET-параметрів, які передаються
        fullUrl() - повертає повний шлях із адресного рядка
        method() - повертає тип запиту користувача (GET, POST, PUT, DELETE)
        isMethod() - перевірка на те, який метод використовує користувач
        flash() - зберігає всі дані в сесії, які були передані в тілі запиту
        flashOnly() - визначає лише ті комірки, які потрібно зберегти в сесії
        flashExcept() - визначає лише ті комірки, які не потрібно зберігати
        withInput() - зберігаємо весь вміст об'єкта Request в сесію
        flush() - очистити дані, записані в сесію

Урок 15. Формування відповіді. Клас Response

    Об'єкт класу Response - це абстракція відповіді

    Відповідь складається з заголовків і з контенту

    Метод view() повертає об'єкт класу Response для конкретного виду

    Метод back() виконує перенаправлення на попередню сторінку

